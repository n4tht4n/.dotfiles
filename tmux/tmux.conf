set -g default-terminal 'screen-256color'
set -g mouse on
set -g history-limit 100000

### configure windows behavior

# start window numbers at 1 to match keyboard order with tmux order
set -g base-index 1
# start pane numbers at 1 to match keyboard order with tmux order
setw -g pane-base-index 1
# renumber windows sequentially after closing any of them
set -g renumber-windows on
# monitor windows for activity
setw -g monitor-activity on

### configure panes behavior

# display pane numbers for longer
set -g display-panes-time 2000
# pane number display
set -g display-panes-active-colour colour166 #blue
set -g display-panes-colour colour33 #orange

### vi style copy mode (enter with leader+[)
set-window-option -g mode-keys vi
unbind -T copy-mode-vi Space; # default for begin-selection
unbind -T copy-mode-vi Enter; # default for copy-selection
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel --clipboard"Â§Â§

### color theme (Solarized 256)

set -g status-style bg=colour235,fg=colour136
setw -g window-status-style fg=colour244
setw -g window-status-current-style fg=colour166
setw -g window-status-activity-style fg=colour61
setw -g window-status-bell-style fg=colour61
set -g pane-border-style fg=colour235
set -g pane-active-border-style fg=colour166
set -g message-style bg=colour235,fg=colour166

### configure status line

set -g status on
set -g status-interval 2
set -g status-justify centre
set -g status-keys vi
set -g status-position bottom
set -g status-left-length 80
set -g status-left-style default
set -g status-left "#[fg=green]#H #[fg=black]â€¢ #[fg=green,bright]#(uname -s) #(uname -r) #[fg=black]â€¢ #[fg=green,bright]#(uname -m)#[default]"
set -g status-right-length 140
set -g status-right-style default
set -g status-right "#[fg=green,bg=default,bright]#(tmux-mem-cpu-load) "
set -ag status-right "#[fg=red,dim,bg=default]#(uptime | cut -f 4-5 -d ' ' | cut -f 1 -d ',') "
set -ag status-right " #[fg=blue,bg=default]%a %Y-%m-%d #[fg=white]%H:%M:%S"

### configure my custom key binds

# use `C-space` as prefix key
unbind C-b
set -g prefix C-Space
# use `C-b r` to reload the tmux.conf
unbind r
bind r source-file $XDG_CONFIG_HOME/tmux/tmux.conf \; display "Reloaded ~/.config/*/tmux.conf"
# use `C-b v` to split vertically, `C-b h` to split horizontally; using the same path
unbind v
unbind h
unbind %    # original keybind vertical...
unbind '"'  # original keybind horizontal
bind v split-window -h -c "#{pane_current_path}"
bind h split-window -v -c "#{pane_current_path}"
# switch panes more easily (`-n` means to prefix key needed!!!)
bind -n C-h select-pane -L
bind -n C-j select-pane -D
bind -n C-k select-pane -U
bind -n C-l select-pane -R
# rebind `C-b w` to create new windows, and `C-b n` to name the current window
unbind n
unbind w
bind n command-prompt "rename-window '%%'"
bind w new-window -c "#{pane_current_path}"
# even faster windows traversal with `M-j` for prev and `M-k` for next window
# unfortunately, this doesn't really work on macOS!? at least in iTerm I could use those keybinds or "~\|" ðŸ˜•
# so for the time being, let's just bind leader j and leader k...
bind j previous-window
bind k next-window
# pane resize
bind -r Left  resize-pane -L 5
bind -r Down  resize-pane -D 5
bind -r Up    resize-pane -U 5
bind -r Right resize-pane -R 5

### perfect tmux <-> vim integration

# fix neovim cursor issue inside tmux
#set -g -a terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
